apiVersion: v1
kind: ConfigMap
metadata:
  name: jenkins-shared-library-config
  namespace: {{ .Values.namespace }}
data:
  libraryCheckoutScript: |
    def call(Map params) {
        assert params.containsKey('url') : "Missing required parameter: url"
        assert params.containsKey('credentialsId') : "Missing required parameter: credentialsId"

        String branch = params.get('branch', 'main')

        checkout([
            $class: 'GitSCM',
            branches: [[name: "*/${branch}"]],
            userRemoteConfigs: [[
                url: params.url,
                credentialsId: params.credentialsId
            ]]
        ])

        // Retrieve the commit SHA after checkout
        env.shortCommitSha = sh(script: "git rev-parse --short HEAD", returnStdout: true).trim()
        echo "Retrieved Commit SHA: ${env.shortCommitSha}"
    }

  sonarQubeIntegrationScript: |
    def call(Map params = [:]) {
        assert params.containsKey('namespace') : "Missing required parameter: namespace"
        assert params.containsKey('awsCredentialsId') : "Missing required parameter: awsCredentialsId"

        String namespace = params.namespace
        String sonarUrl
        String sonarProjectKey
        String sonarToken

        withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: params.awsCredentialsId]]) {
            // Retrieve SonarQube URL and Project Key from the ConfigMap
            sonarUrl = sh(script: "kubectl get configmap sonar-config -n ${namespace} -o=jsonpath='{.data.SONAR_URL}'", returnStdout: true).trim()
            sonarProjectKey = sh(script: "kubectl get configmap sonar-config -n ${namespace} -o=jsonpath='{.data.SONAR_PROJECT_KEY}'", returnStdout: true).trim()

            // Retrieve SonarQube token from the Secret
            sonarToken = sh(script: "kubectl get secret sonar-secrets -n ${namespace} -o=jsonpath='{.data.SONAR_TOKEN}' | base64 --decode", returnStdout: true).trim()

            // Run SonarQube analysis with appropriate environment variables
            withEnv([
                "SONAR_HOST_URL=${sonarUrl}", 
                "SONAR_PROJECT_KEY=${sonarProjectKey}", 
                "SONAR_TOKEN=${sonarToken}"
            ]) {
                sh "./mvnw sonar:sonar -Dsonar.host.url=${sonarUrl} -Dsonar.projectKey=${sonarProjectKey} -Dsonar.login=${sonarToken}"
            }
        }
    }

  dockerBuildAndPushScript: |
    def call(Map params = [:]) {
        assert params.containsKey('imageName') : "Missing required parameter: imageName"
        assert params.containsKey('awsCredentialsId') : "Missing required parameter: awsCredentialsId"
        assert params.containsKey('ecrUrl') : "Missing required parameter: ecrUrl"

        String imageName = params.imageName
        String ecrUrl = params.ecrUrl

        withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: params.awsCredentialsId]]) {
            sh """
                aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${ecrUrl}
                docker build -t ${ecrUrl}/${imageName}:latest .
                docker push ${ecrUrl}/${imageName}:latest
            """
        }
    }
